name: Deploy and Test

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      registry:
        description: 'Container registry to push images to'
        required: false
        default: 'ghcr.io'
        type: string
      image_tag:
        description: 'The image tag to deploy'
        required: true
        type: string

env:
  DOCKER_PREFIX:  ${{ inputs.registry }}/${{ github.repository }}
  DOCKER_TAG: ${{ inputs.image_tag }}
  KUBEVIRT_PROVIDER: external
  KUBECONFIG: ${{ github.workspace }}/kube-config
  KUBEVIRT_WITH_ETC_IN_MEMORY: "true"
  JUNIT_REPORT_FILE: _out/artifacts/junit.functest.xml

  
jobs:
  Deploy_and_Test:
    environment: ${{ inputs.environment }}
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate Manifests with configured Feature Gates
        run: |          
          make manifests
        env: 
          FEATURE_GATES: ${{ vars.FEATURE_GATES }}  
      
      - name: Upload Manifests
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-manifests
          path: ${{ github.workspace }}/_out/manifests

      - name: Configure kubeconfig
        run: |
          echo "$KUBE_CONFIG_CONTENT" > $KUBECONFIG          
        env:
          KUBE_CONFIG_CONTENT: ${{ secrets.KUBE_CONFIG }}             

      - name: Deploy
        run: |
          make cluster-up
          make cluster-deploy

          # if KUBEVIRT_CR env varaibale is set, deploy the custom KubeVirt CR
          if [ -n "${KUBEVIRT_CR:-}" ]; then
            echo "Applying custom KubeVirt CR from KUBEVIRT_CR environment variable"
            echo "$KUBEVIRT_CR" | ./kubevirtci/cluster-up/kubectl.sh apply -f -
          fi
          
        env:
          KUBEVIRT_CR: ${{ vars.KUBEVIRT_CR }}  

      - name: Test
        run: |
          rm -f $JUNIT_REPORT_FILE
          make cluster-up
          FUNC_TEST_ARGS=--no-color \
          FUNC_TEST_LABEL_FILTER='--label-filter=(!flake-check)&&('"${TEST_FOCUS}"'&&!(single-replica)&&(!QUARANTINE)&&(!requireHugepages2Mi)&&(!requireHugepages1Gi)&&(!SwapTest))' make functest
        env:          
          TEST_FOCUS: ${{ vars.TEST_FOCUS }}
          KUBEVIRT_E2E_SKIP: ${{ vars.TEST_SKIP }}
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-func-test-results
          path: ${{ env.JUNIT_REPORT_FILE }}
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: "Functional Tests ${{ inputs.environment }}"
          path: ${{ env.JUNIT_REPORT_FILE }}
          reporter: java-junit
          fail-on-error: false
          max-annotations: 50


