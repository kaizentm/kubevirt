name: CICD Pipeline

on:
  push:
    branches: ["main", "eugene/*"]
  workflow_dispatch:

env:
  DOCKER_PREFIX: ghcr.io/${{ github.repository }}
  DOCKER_TAG: ${{ vars.VERSION }}-l1vh.${{ github.run_number }}

  
jobs:
  quality-check:
    uses: ./.github/workflows/pr.yaml
    
  Build_Push_Images:
    runs-on: ubuntu-latest
    needs: [quality-check]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GHCR
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Build Images
        run: |
          make bazel-build-images


      - name: Push Images
        run: |
          make bazel-push-images

  Deploy_to_Dev:
    runs-on: ubuntu-latest
    needs: [Build_Push_Images]
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate Manifests with configured Feature Gates
        run: |          
          make manifests
        env: 
          FEATURE_GATES: ${{ vars.FEATURE_GATES }}  
      
      - name: Upload Manifests
        uses: actions/upload-artifact@v4
        with:
          name: dev-manifests
          path: ${{ github.workspace }}/_out/manifests

      # TODO: implement deploy and test steps
      - name: Deploy to Dev Cluster
        run: |
          echo "Deploying to Dev cluster..."

      - name: Run tests on Dev Cluster
        run: |
          echo "Running tests on Dev cluster..."


  Deploy_to_Ephemeral:
    runs-on: ubuntu-latest
    needs: [Build_Push_Images]
    environment: ephemeral
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Start Ephemeral Environment
        run: |
          make cluster-up

      - name: Deploy To Ephemeral Environment
        run: |
          make cluster-sync
        env: 
          FEATURE_GATES: ${{ vars.FEATURE_GATES }}  

      - name: Run Functional Tests
        run: |
          make functest
